// BASIC UTILITY CLIENT FOR WINDOWS

use lib Std
use lib Std::Console
use lib Std::System

fn clear_console() => TryClearIO()

// Ip vars
var string hostname = "idk lol"
var string IPAddr = "IpAddr"

// Info
var string Ver = "1.1.1"
var string Build = "4"
var string Latest_update = "
No longer crashes when the client fails to request data
"
var string LatestVerLink = "https://raw.githubusercontent.com/myfornite/Omega-Client/refs/heads/data/LatestVersion" //  Stores the number
var string LatestVerLinkHolder = "https://raw.githubusercontent.com/myfornite/Omega-Client/refs/heads/data/LatestVersionLink" //  Stores the link to the version

var string githubLink = "https://github.com/myfornite/Omega-Client/tree/main"

var string logo = "
==============
 OMEGA CLIENT
==============

Credits:
forgotpass3244
ThedonutDEV
"

var string FailedToFetchMsg = "(failed to fetch)"

fn get_ip_info(string ip) {} of string:
    var string url = use string("https://ipinfo.io/", ip, "/json")
    var string response = Web::Get(url)
    var {} of string data = JSON::Parse(response)
    => data
esc

fn get_public_ip() string:
    // do:
    //     => Web::Get("https://api64.ipify.org?format=text")
    // with string e:
    //     => FailedToFetchMsg
    // esc
esc

var string PublicIP = get_public_ip()

fn test_ping(string target):
    var string cmd = use string("ping -t ", target)
    Execute(cmd)
esc

fn flush_dns():
    var string cmd = "ipconfig /flushdns"
    Execute(cmd)
esc

fn traceroute(string target):
    var string cmd = use string("tracert ", target)
    Execute(cmd)
esc

var string Options =  "
Commands

help. Show all commands
clear. Clear the console
1. Check latest version
2. Exit client
3. Get host and system info
4. Open remote shutdown dialog
5. Run as admin bypass
6. Get data from IP (needs wifi)
7. Network details
8. Lock computer
9. Shutdown computer
10. Restart computer
11. Flush DNS
12. Tracerouter
"

fn Main({} of <string> argv):
    WriteLn(logo)
    WriteLn("[ Link: (", githubLink, ") ]")
    WriteLn("Version ", Ver, " Build ", Build, ". Note: ", Latest_update)
    WriteLn("Type 'help' to see a list of all commands")

    for true:
        Write("Command: ")
        var string SelectedOption = ReadLn()

        if SelectedOption == "help":
            WriteLn(Options)
        else SelectedOption == "clear":
            clear_console()
            WriteLn(Options)
        else SelectedOption == "1":
            // try:
            //     LatestVer = requests.get(LatestVerLink)
            //     LatestVer = LatestVer.text
            //     LatestVerLinkHeld = requests.get(LatestVerLinkHolder)
            //     LatestVerLinkHeld = LatestVerLinkHeld.text
            //     WriteLn(f"Current: {Ver}, Latest: {LatestVer} {LatestVerLinkHeld}")
            // except:
                WriteLn(FailedToFetchMsg)
        else SelectedOption == "2":
            WriteLn("Closing client... bye!")
            Flush()
            Sleep(0.5)
            Exit(0)
        else SelectedOption == "3":
            WriteLn("Host name: {hostname}, OS: {platform.system()} {platform.release()}, Private IP address: {IPAddr}, Public IP address: {PublicIP}")
        else SelectedOption == "4":
            WriteLn("Close the new window continue.")
            Flush()
            Sleep(0.1)
            Execute("shutdown -i")
        else SelectedOption == "5":
            Write("File to bypass as admin: ")
            var string ApplicationToBypass = ReadLn()
            WriteLn("Opening ", ApplicationToBypass, "...")
            var string cmd
            cmd = "set __compact_layer=runasinvoker" 
            Execute(cmd)
            cmd = use string("start ", ApplicationToBypass, " admin" )
            Execute(cmd)
        else SelectedOption == "6":
            Write("IP: ")
            var string GetLocationIp = ReadLn()
            WriteLn("fetching data...")
            do:
                var string GotIpData
                GotIpData = get_ip_info(GetLocationIp)
                GotIpData = use string(GotIpData)
                WriteLn(GotIpData)
            with string e:
                WriteLn(FailedToFetchMsg)
            esc
        else SelectedOption == "7":
            WriteLn()
            WriteLn("Networks: ")
            Flush()
            var string cmd
            cmd = "netsh wlan show profile" 
            Execute(cmd)
            WriteLn()
            Write("Network to view: ")
            var string NetPassToFind = ReadLn()
            WriteLn()
            WriteLn("Network details: ")
            Flush()
            cmd = use string("netsh wlan show profile ", NetPassToFind, " key=clear")
            Execute(cmd)
            WriteLn()
            WriteLn("Password is in key content. (saved password)")
            WriteLn()
        else SelectedOption == "8":
            Execute("rundll32.exe user32.dll, LockWorkStation")
        else SelectedOption == "9":
            Write("Are you sure? y/n: ")
            if ReadLn() == "y":
                WriteLn("Shutting down in less than a minute...")
                Execute("shutdown /s")
            esc
        else SelectedOption == "10":
            Write("Are you sure? y/n: ")
            if ReadLn() == "y":
                WriteLn("Restarting soon...")
                Execute("shutdown /r")
            esc
        else SelectedOption == "11":
            flush_dns()
            WriteLn()
        else SelectedOption == "12":
            Write("Traceroute to website: ")
            var string target = ReadLn("Traceroute to website: ")
            traceroute(target)
        else:
            WriteLn("'", SelectedOption, "' is not a valid command.")
        esc
    esc
esc
