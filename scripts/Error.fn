/// header for basic error handling using signals
/// basic example:

/// #include "Error.fn"
///
/// do // start of the try statement
///     // ~> means broadcast signal
///     ~> Error(ErrLvl::Error, "Message")
///
/// with Error_t e do // receive the signal
///     Std::IO::WriteLn("Error: ", e)
/// esc

/// error levels:

/// do ~> Error(ErrLvl::Error, "Message")
/// with Error_t e do
///     if e.Level == ErrLvl::Error do
///         Std::IO::WriteLn("An error occurred:\n", e.Message)
///     else e.Level == ErrLvl::Fatal do
///         Std::IO::WriteLn("A fatal error has occurred:\n", e.Message)
///         Std::IO::WriteLn("Closing the program due to the unexpected error.")
///         Std::Exit(1)
///     esc
/// esc

// source:

#macro Error_t = {} of <string>;
#macro ErrLvl_t = string;

lib ErrLvl
    ErrLvl_t Warning = 'Warning'
    ErrLvl_t Deprecated = 'DeprecationWarning'
    ErrLvl_t Error = 'Error'
    ErrLvl_t Fatal = 'Fatal'
esc

fn Error(ErrLvl_t Level, string Message) Error_t
    => { (string) ['Level']: Level, ['Message']: Message }
